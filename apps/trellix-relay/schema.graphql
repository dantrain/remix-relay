"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean! = true

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to stream plural fields when the `if` argument is true or undefined.
"""
directive @stream(
  """Stream when true or undefined."""
  if: Boolean! = true

  """Number of items to return immediately"""
  initialCount: Int = 0

  """Unique name"""
  label: String
) on FIELD

type Board implements Node {
  columnConnection(after: String, before: String, first: Int, last: Int): BoardColumnConnection!
  createdAt: String!
  id: ID!
  name: String!
}

type BoardColumnConnection {
  edges: [BoardColumnConnectionEdge!]!
  pageInfo: PageInfo!
}

type BoardColumnConnectionEdge {
  cursor: String!
  node: Column!
}

type Column implements Node {
  createdAt: String!
  id: ID!
  itemConnection(after: String, before: String, first: Int, last: Int): ColumnItemConnection!
  rank: String!
  title: String!
}

type ColumnItemConnection {
  edges: [ColumnItemConnectionEdge!]!
  pageInfo: PageInfo!
}

type ColumnItemConnectionEdge {
  cursor: String!
  node: Item!
}

type Item implements Node {
  createdAt: String!
  id: ID!
  rank: String!
  text: String!
}

type Mutation {
  createOneBoard(id: ID!, name: String!): Board!
  createOneColumn(boardId: ID!, id: ID!, rank: String!, title: String!): Column!
  createOneItem(columnId: ID!, id: ID!, rank: String!, text: String!): Item!
  deleteOneBoard(id: ID!): Board!
  deleteOneColumn(id: ID!): Column!
  deleteOneItem(id: ID!): Item!
  updateOneBoard(id: ID!, name: String!): Board!
  updateOneColumn(id: ID!, rank: String, title: String): Column!
  updateOneItem(columnId: ID, id: ID!, rank: String, text: String): Item!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  board(id: ID!): Board!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  viewer: User!
}

type Subscription {
  column(id: ID!): Column!
  columnCreated: Column!
  columnDeleted: Column!
  item(id: ID!): Item!
}

type User implements Node {
  boardConnection(after: String, before: String, first: Int, last: Int): UserBoardConnection!
  id: ID!
}

type UserBoardConnection {
  edges: [UserBoardConnectionEdge!]!
  pageInfo: PageInfo!
}

type UserBoardConnectionEdge {
  cursor: String!
  node: Board!
}