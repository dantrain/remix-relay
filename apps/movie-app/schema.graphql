"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean! = true

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to stream plural fields when the `if` argument is true or undefined.
"""
directive @stream(
  """Stream when true or undefined."""
  if: Boolean! = true

  """Number of items to return immediately"""
  initialCount: Int = 0

  """Unique name"""
  label: String
) on FIELD

type Movie implements Node {
  audienceScore: Int!
  boxOffice: String!
  criticScore: Int!
  criticsConsensus: String!
  id: ID!
  imgUrl: String!
  liked: Boolean!
  reviews(after: String, before: String, first: Int, last: Int): MovieReviewsConnection!
  slug: String!
  title: String!
}

type MovieReviewsConnection {
  edges: [MovieReviewsConnectionEdge!]!
  pageInfo: PageInfo!
}

type MovieReviewsConnectionEdge {
  cursor: String!
  node: Review!
}

type Mutation {
  setLikedMovie(id: ID!, liked: Boolean!): Movie!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  movie(slug: String!): Movie!
  movieConnection(after: String, before: String, first: Int, last: Int): QueryMovieConnection!
  movies: [Movie!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type QueryMovieConnection {
  edges: [QueryMovieConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryMovieConnectionEdge {
  cursor: String!
  node: Movie!
}

type Review implements Node {
  criticName: String!
  criticSource: String!
  fresh: Boolean!
  id: ID!
  quote: String!
}